

# 03.04.2015, C.A.Merz


-----------------
christian@linux-qo6d:~/perl> sqlite3
SQLite version 3.8.8.3 2015-02-25 13:29:11
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.

sqlite> .open /srv/www/daten/heizung.dbf
sqlite> select * from temperatur_werte;
-----------------

Quelle:
perldoc DBD::SQLite

#use DBI;
use DBI qw(:sql_types);

my $dbfile = ':memory:'; # ":memory:", then a private, temporary in-memory 
  # database is created for the connection. This in-memory database will vanish 
  # when the database connection is closed.  It is handy for your library tests.

  # If the filename $dbfile is an empty string, then a private, temporary 
  # on-disk database will be created. This private database will be automatically 
  # deleted as soon as the database connection is closed.
  
#my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","");
my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", undef, undef, {
  AutoCommit => 1,
  RaiseError => 1,
  sqlite_see_if_its_a_number => 1,
    # let DBD::SQLite to see if the bind values are numbers or not
  sqlite_unicode => 1,	# UTF-8

});


"$sth->finish" and Transaction Rollback
       As the DBI doc says, you almost certainly do not need to call "finish" in DBI method if you fetch all rows (probably in a loop).  
       However, there are several exceptions to this rule, and rolling-back of an unfinished "SELECT" statement is one of such exceptional cases.

       SQLite prohibits "ROLLBACK" of unfinished "SELECT" statements in a transaction (See <http://sqlite.org/lang_transaction.html> for details). 
       So you need to call "finish" before you issue a rollback.

         $sth = $dbh->prepare("SELECT * FROM t");
         $dbh->begin_work;
         eval {
             $sth->execute;
             $row = $sth->fetch;
             ...
             die "For some reason";
             ...
         };
         if($@) {
            $sth->finish;  # You need this for SQLite
            $dbh->rollback;
         } else {
            $dbh->commit;
         }

Performance

         SELECT url, count(*) as count
         FROM access_log
         GROUP BY url
         ORDER BY count desc
         LIMIT 20
       For best performance be sure to tune your hdparm settings if you are using linux. Also you might want to set:

         PRAGMA synchronous = OFF

       Which will prevent sqlite from doing fsync's when writing (which slows down non-transactional writes significantly) at the expense 
       of some peace of mind. Also try playing with the cache_size pragma.

       The memory usage of SQLite can also be tuned using the cache_size pragma.

         $dbh->do("PRAGMA cache_size = 800000");

       The above will allocate 800M for DB cache; the default is 2M.  Your sweet spot probably lies somewhere in between.
       

DRIVER PRIVATE ATTRIBUTES
   Database Handle Attributes
       
       sqlite_unicode
           If set to a true value, DBD::SQLite will turn the UTF-8 flag on for all text strings coming out of the database (this feature 
           is currently disabled for perl < 5.8.5). For more details on the UTF-8 flag see perlunicode. The default is for the UTF-8 
           flag to be turned off.

           Also note that due to some bizarreness in SQLite's type system (see <http://www.sqlite.org/datatype3.html>), if you want to 
           retain blob-style behavior for some columns under "$dbh->{sqlite_unicode} = 1" (say, to store images in the database), you have 
           to state so explicitly using the 3-argument form of "bind_param" in DBI when doing updates:

             use DBI qw(:sql_types);
             $dbh->{sqlite_unicode} = 1;
             my $sth = $dbh->prepare("INSERT INTO mytable (blobcolumn) VALUES (?)");

             # Binary_data will be stored as is.
             $sth->bind_param(1, $binary_data, SQL_BLOB);

           Defining the column type as "BLOB" in the DDL is not sufficient.

           This attribute was originally named as "unicode", and renamed to "sqlite_unicode" for integrity since version 1.26_06. Old "unicode" attribute is still accessible but will be
           deprecated in the near future.
